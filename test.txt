file--》new project-->空项目（empty project）--》直接下一步fish完成
file--》new module--》maven（其他都不选择创建空项目）---》剩下的就是创建普通maven项目步骤---》这是springcloud 的父级项目制作规则配置（版本号不做其他的，创建好后可以直接将src干掉）

引依赖
写配置
加注解
    1、搭建springcloud父项目
        1.1、自定义properties属性
            <properties>
                    <spring.cloud-version>Hoxton.SR6</spring.cloud-version>
                </properties>
        1.2、维护版本springcloud版本，这里的东西不会导入包
             <!--维护版本springcloud版本-->
                        <dependency>
                            <groupId>org.springframework.cloud</groupId>
                            <artifactId>spring-cloud-dependencies</artifactId>
                            <version>${spring.cloud-version}</version>
                            <type>pom</type>
                            <scope>import</scope>
                        </dependency>
        1.3、继承springboot的父项目，注意集成springcloud的版本会限制sprigboot 的版本
             <parent>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-parent</artifactId>
                    <version>2.2.5.RELEASE</version>
                </parent>
eureka（最初的netflix公司产品）注册中心
    2、添加第一个组件（注册中心）
        2.1、定义：所谓的注册中心就是整个微服务架构中单独提出一个服务，这个服务不完成系统的任何业务逻辑的处理，仅仅完成整个微服务的注册和发现，以及对服务状态的监控和管理功能
        2.2、
            2.2.1、所有微服务信息的存储、如ip，端口，名称等。
            2.2.2、可以通过微服务调用时通过服务发现查询可用的微服务列表及网络地址的调用
            2.2.3、可以对所有微服务的进行心跳检测，如发现调用较长时间未响应，就会从服务列表移除该实例
        2.3、常用注册中心：eureka（最初netflix）、zookeepper(java)、consul(谷歌 GO语言)、nacos（阿里基于java）
        2.4、简介eureka是netflix公司的产品， 后背spring-cloud-netflix-eureka封装
            eureka包括两部分，eureka server 和 eureka client
        2.5、eureka  server的开发
            创建子项目springboot项目
            引eureka server依赖
            写配置，eureka server默认端口为8761
                #eureka server默认的端口号为8761
                server.port=8761
                #注册的服务服务名称---以后微服务必须有服务名称，不区分大小写，不准有下划线，建议大写，以为注册上以后展示都是大写
                spring.application.name=eurekaServer
                #指定服务注册中心位置
                eureka.client.service-url.defaultZone=http://localhost:8761/eureka
            人口类加注解
                @EnableEurekaServer
        2.6、注意开发细节
    3、注册中心客户端的开发（正常情况下每一个服务都相当于一个客户端）
        加依赖
            <!--引入eureka client依赖包-->
                    <dependency>
                        <groupId>org.springframework.cloud</groupId>
                        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
                    </dependency>
        加配置
            server.port=8011
            spring.application.name=EUREKACLIENT
            #配置注册地址
            eureka.client.service-url.defaultZone=http://localhost:8761/eureka
        加注解
            @EnableEurekaClient
        eureka的自我保护机制
consul（谷歌go语言开发）服务注册中心
    1、官方下载解压
    2、cmd窗口运行启动
        2.1、启动命令：consul agent -dev    生产环境需要 -server 生产环境的话必须需要集群才可以使用-server启动，-dev可以单击使用
    3、访问ui界面：默认端口是8500，localhost:8500
    4、客户端开发
        依赖（依赖有两个，一个启动依赖、一个健康检测依赖）、配置地址、加注解
微服务只见的通信问题：RestTemplate
    http rest 方式  httpx 协议调用
    Rpc  方式   远程过程调用    二进制
    OSI  方式    物理层  数据链层  网络层  传输层（RPC）  会话层  表示层  应用层（http）
    double架构：使用的是   传输层（RPC） 传输相对来说要快
    spring架构：传输使用的是  应用层（http），
ribbon负载均衡客户端组件，是基于netflix的组件进行封装的组件
    ribbo只做负载不做调用，客户端的负载均衡
    1、原理：ribbon通过服务名去注册中心consul获取调用地址，缓存到本地，然后按照对应的规则去调用真正的服务，
    同时还有安全监控（服务跟注册中心保持心跳，一旦出现宕机，注册中心就会通知ribbon），如果某一个服务挂掉恰巧调用到该服务，那只能是失败
    2、在consul的依赖中已经引入了ribbon的依赖包，所以无需再次引入
    3、ribbon策略：
        RoundRobinRule：轮训、
        RandomeRule：随机
        AvailabilityFilteringRule（可用于过滤）：先过滤多次访问故障而处于断路器的服务，还有并发数量超过阈值的服务
        WeightedResponseTimeRule（响应时间甲权重）：根据平均返回时间计算权重，相应时间越快权重越大，刚启动默认轮训
        RetryRule（重试策略）:先按照轮训策略，如果获取失败则进行重试获取服务
        BestAvailableRule（最低分配策略）：会过滤掉由于多次访问故障而处于跳闸状态的服务，然后选择一个并发量最小的服务

openFeign组件,相当于restClient服务调用，相当于一个http的伪客户端，
    1、封装了RestTemplate可以发起服务之间的调用，可以使服务之间调用更加的简单
    2、细节处理：
        2.1、默认的从超时处理，默认1秒需要相应，如果超过1秒无反应说明响应超时，会报出超时异常
            #配置格式feign.client.config + 服务名称id + read-timeout / connect-timeout
            #设置openfeign的调用等待时间，默认是1秒----这个默认时间太短了，很容易出现意外
            feign.client.config.ORDERSERVICE.readTimeout=5000
            #配置指定服务的的连接时间，默认一秒时间太多很容易出现意外
            feign.client.config.ORDERSERVICE.connectTimeout=5000
        2.2、日志功能
            #指定某个包下的日志级别----springboot的指定日志级别
            格式 logging.level + 包名 = 级别
            logging.level.com.springboot.dao=debug
            #feign调用指定的日志级别 none（不展示调用日志）、basic（只展示url、端口、相应状态以及执行时间）、headers（在basic的基础上又增加了响应头的）、full（记录请求相应的header、body和元数据）
            feign.client.config.ORDERSERVICE.loggerLevel=full
hystrix服务熔断组件---熔断是系统操作（框架处理），降级是人为干预的------netfile旗下的组件
    服务雪崩：是指集群环境由于某一个服务出现故障导致连锁反应，使整个集群无法正常运行的现象，就是服务雪崩
    第一、服务熔断
        1、作用：防止服务雪崩现象的出现
        2、熔断机制：所有需要监控的项目都必须引入hystrix组件
        3、什么时候会触发熔断器
            3.1、10秒内20个请求全部出错
            3.2、10秒内超出50%的调用失败也会出发熔断机制
        4、触发断路器后什么时候自动关闭
            4.1、断路器打开后5秒后会半开，放行一个访问进行试探调用，成功则关闭断路器，失败则继续开启断路器，进入一个循环5秒在试探
    第二、服务降级
        服务熔断是服务降级的一种展现形式
        定义：服务压力剧增的时候，根据一些页面有策略的进行服务降级，以此缓解服务的压力，以保证保证部分核心任务的运行，同时保证部分或者大部分的客户可以得到相应。也就是当前应用出错给一个默认的返回
    第三、加入集群
        因为openfeign已经集成了hystrix组件，直接在配置上开启hystrix即可
        #开启openfeigm中的hystrix熔断机制
        feign.hystrix.enabled=true
    第四、开发
        1、加注解@FeignClient(value = "ORDERSERVICE",fallback = OrderClientImpl.class)//指定这是openfeign的哪一个服务调、fallback指定调用失败走哪一个实现类
        开发调用失败的默认的返回类，返回类需要实现openfeign对应的接口
    第五、UI展示DashBoard
        加依赖
            <!--增加hystrix Dashboard依赖-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>
            </dependency>
        加配置
        加注解
            @EnableHystrixDashboard//开启hystrix的Dashboard组件主要就是ui展示，各组件状态是否正常
        访问：
            监控的url：https://localhost:8041/actuator/hystrix.stream   格式：域名+/actuator/hystrix.stream
            监控的多久刷新一次：Delay:
            给监控设置一个名称：title
        bug：本身hystrix dashboard是存在bug的，
            bug1：
                监控缺失对应的监控地址信息
            解决办法：
                在需要监控的项目中增加一个bean信息
                @Bean
                public ServletRegistrationBean getServlet(){
                    HystrixMetricsStreamServlet st = new HystrixMetricsStreamServlet();
                    ServletRegistrationBean rs = new ServletRegistrationBean(st);
                    rs.setLoadOnStartup(1);
                    rs.addUrlMappings("/hystrix.stream");
                    rs.setName("HystrixMetricsStreamServlet");
                    return rs;
                }
            bug2：
                前端js报错，是因为jquery以前版本的的load方法已经不存在了，
            解决办法：
                通过页面报错找到对应的html文件
                    将$(window).load(function修改为$(window).on("load",function
                    一共有两个地方，修改完成即可

