file--》new project-->空项目（empty project）--》直接下一步fish完成
file--》new module--》maven（其他都不选择创建空项目）---》剩下的就是创建普通maven项目步骤---》这是springcloud 的父级项目制作规则配置（版本号不做其他的，创建好后可以直接将src干掉）

引依赖
写配置
加注解


    1、搭建springcloud父项目
        1.1、自定义properties属性
            <properties>
                    <spring.cloud-version>Hoxton.SR6</spring.cloud-version>
                </properties>
        1.2、维护版本springcloud版本，这里的东西不会导入包
             <!--维护版本springcloud版本-->
                        <dependency>
                            <groupId>org.springframework.cloud</groupId>
                            <artifactId>spring-cloud-dependencies</artifactId>
                            <version>${spring.cloud-version}</version>
                            <type>pom</type>
                            <scope>import</scope>
                        </dependency>
        1.3、继承springboot的父项目，注意集成springcloud的版本会限制sprigboot 的版本
             <parent>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-parent</artifactId>
                    <version>2.2.5.RELEASE</version>
                </parent>
eureka（最初的netflix公司产品）注册中心
    2、添加第一个组件（注册中心）
        2.1、定义：所谓的注册中心就是整个微服务架构中单独提出一个服务，这个服务不完成系统的任何业务逻辑的处理，仅仅完成整个微服务的注册和发现，以及对服务状态的监控和管理功能
        2.2、
            2.2.1、所有微服务信息的存储、如ip，端口，名称等。
            2.2.2、可以通过微服务调用时通过服务发现查询可用的微服务列表及网络地址的调用
            2.2.3、可以对所有微服务的进行心跳检测，如发现调用较长时间未响应，就会从服务列表移除该实例
        2.3、常用注册中心：eureka（最初netflix）、zookeepper(java)、consul(谷歌 GO语言)、nacos（阿里基于java）
        2.4、简介eureka是netflix公司的产品， 后背spring-cloud-netflix-eureka封装
            eureka包括两部分，eureka server 和 eureka client
        2.5、eureka  server的开发
            创建子项目springboot项目
            引eureka server依赖
            写配置，eureka server默认端口为8761
                #eureka server默认的端口号为8761
                server.port=8761
                #注册的服务服务名称---以后微服务必须有服务名称，不区分大小写，不准有下划线，建议大写，以为注册上以后展示都是大写
                spring.application.name=eurekaServer
                #指定服务注册中心位置
                eureka.client.service-url.defaultZone=http://localhost:8761/eureka
            人口类加注解
                @EnableEurekaServer
        2.6、注意开发细节
    3、注册中心客户端的开发（正常情况下每一个服务都相当于一个客户端）
        加依赖
            <!--引入eureka client依赖包-->
                    <dependency>
                        <groupId>org.springframework.cloud</groupId>
                        <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
                    </dependency>
        加配置
            server.port=8011
            spring.application.name=EUREKACLIENT
            #配置注册地址
            eureka.client.service-url.defaultZone=http://localhost:8761/eureka
        加注解
            @EnableEurekaClient
        eureka的自我保护机制
consul（谷歌go语言开发）服务注册中心
    1、官方下载解压
    2、cmd窗口运行启动
        2.1、启动命令：consul agent -dev    生产环境需要 -server 生产环境的话必须需要集群才可以使用-server启动，-dev可以单击使用
    3、访问ui界面：默认端口是8500，localhost:8500
    4、客户端开发
        依赖（依赖有两个，一个启动依赖、一个健康检测依赖）、配置地址、加注解
微服务只见的通信问题：RestTemplate
    http rest 方式  httpx 协议调用
    Rpc  方式   远程过程调用    二进制
    OSI  方式    物理层  数据链层  网络层  传输层（RPC）  会话层  表示层  应用层（http）
    double架构：使用的是   传输层（RPC） 传输相对来说要快
    spring架构：传输使用的是  应用层（http），
ribbon负载均衡客户端组件，是基于netflix的组件进行封装的组件
    ribbo只做负载不做调用，客户端的负载均衡
    1、原理：ribbon通过服务名去注册中心consul获取调用地址，缓存到本地，然后按照对应的规则去调用真正的服务，
    同时还有安全监控（服务跟注册中心保持心跳，一旦出现宕机，注册中心就会通知ribbon），如果某一个服务挂掉恰巧调用到该服务，那只能是失败
    2、在consul的依赖中已经引入了ribbon的依赖包，所以无需再次引入
    3、ribbon策略：
        RoundRobinRule：轮训、
        RandomeRule：随机
        AvailabilityFilteringRule（可用于过滤）：先过滤多次访问故障而处于断路器的服务，还有并发数量超过阈值的服务
        WeightedResponseTimeRule（响应时间甲权重）：根据平均返回时间计算权重，相应时间越快权重越大，刚启动默认轮训
        RetryRule（重试策略）:先按照轮训策略，如果获取失败则进行重试获取服务
        BestAvailableRule（最低分配策略）：会过滤掉由于多次访问故障而处于跳闸状态的服务，然后选择一个并发量最小的服务

openFeign组件


